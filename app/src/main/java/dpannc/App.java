
package dpannc;

import java.io.File;
import java.util.*;

public class App {

    public static void main(String[] args) throws Exception {
        // String filePath = "app/src/main/resources/GloVe-6B/glove-6B-50d-mini.txt";
        String filePath = "app/src/main/resources/fasttext/dk-300d.txt";
        int n = 1000;
        int d = 300;
        DPANNC tree = new AIMN(1.0f, 2.0f, 0.0001f);
        tree.populate(n, d, filePath);
        System.out.println("leafs: " + tree.leafs());
        System.out.println("nodes: " + tree.nodes());
        float[] car2 = new float[] {0.14f, 0.1736f, 0.0155f, 0.2376f, -0.2047f, 0.1871f, 0.2915f, 0.0037f, 0.0490f, 0.2602f, -0.0832f, -0.1565f, 0.0869f, -0.0478f, -0.1186f, 0.1549f, -0.1691f, -0.1224f, -0.1407f, 0.0454f, -0.0382f, -0.1468f, 0.1369f, -0.1505f, -0.0182f, 0.0147f, -0.0421f, 0.1394f, 0.0429f, 0.3053f, -0.0167f, 0.2916f, -0.0333f, -0.0469f, 0.0268f, 0.0871f, -0.0539f, 0.1338f, 0.0851f, -0.0641f, -0.1038f, -0.1813f, -0.1109f, 0.1670f, -0.1998f, 0.0045f, -0.0189f, -0.0279f, -0.2932f, -0.0058f, 0.1753f, 0.1087f, -0.0188f, 0.0253f, 0.0996f, -0.0313f, 0.0975f, -0.1575f, -0.1647f, -0.0687f, 0.0001f, 0.0160f, 0.1104f, 0.0610f, 0.1075f, -0.1336f, -0.0703f, 0.1164f, 0.1185f, 0.0615f, -0.0818f, 0.0041f, 0.0123f, 0.0157f, 0.0373f, -0.0109f, -0.0878f, 0.2941f, -0.1093f, -0.0745f, -0.2636f, -0.0284f, -0.1522f, -0.1005f, 0.0463f, -0.0651f, -0.0757f, 0.0146f, -0.0301f, -0.0628f, 0.0732f, -0.3399f, -0.0212f, 0.1204f, 0.0195f, 0.1464f, 0.0420f, 0.2272f, -0.0477f, 0.0583f, -0.1182f, 0.0195f, 0.1293f, -0.0823f, -0.1824f, 0.1228f, -0.0433f, -0.0763f, -0.1493f, 0.1326f, 0.2071f, -0.2402f, -0.0302f, 0.1001f, 0.1095f, 0.1781f, 0.0520f, -0.1187f, -0.0670f, 0.2077f, -0.0314f, 0.2846f, -0.0852f, -0.0201f, -0.0193f, -0.2076f, -0.1205f, 0.1405f, 0.1057f, 0.0039f, 0.0656f, -0.2376f, -0.0357f, -0.0803f, -0.0225f, -0.1231f, 0.1510f, 0.2437f, 0.1886f, 0.0031f, -0.1428f, 0.0787f, 0.0061f, -0.1674f, -0.0855f, 0.0796f, -0.3456f, 0.0583f, -0.1062f, -0.1788f, -0.0463f, -0.0723f, 0.0700f, -0.0118f, -0.1155f, -0.0583f, 0.1167f, 0.0570f, -0.0790f, 0.0836f, 0.0816f, -0.1736f, 0.2345f, 0.0314f, -0.0283f, -0.0313f, 0.1574f, -0.0124f, -0.0604f, 0.1004f, 0.1091f, 0.0535f, -0.1129f, -0.2188f, -0.0227f, -0.2151f, -0.1116f, -0.0390f, 0.0859f, -0.1979f, -0.0418f, -0.1151f, 0.0450f, -0.1305f, -0.0606f, 0.3081f, -0.0484f, -0.0504f, 0.0568f, 0.1035f, 0.0378f, 0.0018f, 0.0236f, 0.1280f, -0.0925f, -0.1442f, 0.3024f, -0.1209f, 0.0256f, -0.0444f, 0.1318f, 0.0505f, 0.0499f, -0.0454f, -0.1253f, 0.1034f, 0.0903f, 0.0089f, 0.0190f, 0.0609f, 0.0895f, -0.0971f, -0.0947f, 0.0292f, -0.0153f, -0.1616f, 0.0032f, -0.0659f, 0.0644f, -0.0262f, 0.0767f, -0.0307f, -0.1665f, -0.0454f, 0.1129f, 0.0202f, -0.0631f, -0.2736f, -0.0825f, -0.0755f, 0.2459f, 0.0784f, -0.0732f, -0.0558f, -0.0208f, 0.0132f, -0.1156f, -0.1288f, -0.0777f, 0.0139f, 0.0769f, 0.0353f, -0.0736f, -0.1481f, 0.1575f, 0.2795f, -0.0701f, -0.1308f, -0.0656f, -0.0390f, 0.0291f, 0.0253f, -0.0187f, 0.0814f, 0.1521f, 0.0524f, -0.2272f, 0.0356f, 0.0105f, -0.0653f, 0.0973f, -0.0646f, -0.0254f, 0.0122f, -0.1398f, -0.0776f, -0.2071f, -0.0715f, 0.0087f, 0.0142f, -0.1930f, 0.2275f, -0.1150f, 0.0409f, -0.0825f, -0.0764f, -0.0939f, 0.0457f, 0.0261f, -0.0334f, 0.0433f, -0.1037f, -0.1414f, -0.1443f, 0.1590f, 0.0099f, 0.0283f, -0.2386f, -0.2764f, -0.0810f, -0.0418f, 0.0175f, -0.1659f, 0.1049f, -0.0111f, 0.0920f, 0.0667f, 0.2077f, 0.0853f, -0.1401f};
        Vector q2 = new Vector(car2).normalize().setLabel("_______car222");
        tree.insert(q2);

        float[] bil = new float[] {-0.0729f, -0.0489f, 0.0440f, 0.0543f, -0.0614f, -0.0167f, -0.0770f, 0.0553f, -0.0602f, -0.0064f, 0.0680f, -0.0427f, -0.0327f, 0.0537f, -0.1400f, 0.0835f, -0.1299f, 0.0699f, 0.1389f, -0.1441f, 0.1038f, -0.1569f, 0.0761f, 0.1286f, -0.0002f, -0.1211f, -0.1575f, -0.0117f, 0.1173f, 0.1404f, -0.1094f, -0.0719f, 0.0288f, -0.1132f, -0.1071f, 0.1108f, -0.0172f, 0.0587f, -0.0507f, -0.0977f, -0.1151f, 0.0983f, -0.1796f, 0.0650f, 0.0222f, 0.0444f, -0.0379f, 0.1335f, 0.0833f, -0.0515f, -0.0667f, -0.0799f, -0.0714f, -0.2147f, -0.1669f, 0.0619f, 0.0649f, 0.0836f, -0.0457f, -0.0621f, 0.0452f, -0.1033f, -0.0529f, -0.0582f, -0.0983f, -0.1751f, 0.1872f, 0.1188f, -0.0507f, 0.0370f, 0.0014f, 0.1412f, 0.0877f, 0.0282f, 0.0871f, -0.0394f, 0.0362f, 0.0368f, -0.0046f, -0.2297f, 0.0477f, 0.0681f, -0.0405f, -0.0323f, -0.1530f, -0.0886f, -0.2026f, 0.1230f, -0.0343f, 0.0553f, 0.1488f, -0.0014f, -0.2091f, -0.0338f, -0.1062f, 0.0461f, 0.0624f, -0.1545f, 0.0328f, 0.0234f, -0.0888f, 0.2499f, 0.0925f, -0.1399f, -0.0158f, 0.0409f, -0.0382f, -0.1090f, -0.0406f, 0.2476f, -0.0143f, 0.0043f, 0.1301f, -0.1603f, 0.0897f, 0.0185f, -0.1225f, -0.0456f, 0.0498f, -0.0325f, 0.3124f, -0.0992f, 0.0546f, -0.1033f, -0.0011f, 0.0960f, -0.0030f, -0.0640f, -0.0833f, 0.0211f, 0.0038f, 0.0819f, -0.0375f, 0.0055f, -0.1386f, -0.0540f, -0.0512f, 0.0540f, 0.0228f, -0.1306f, 0.0753f, -0.0204f, 0.0968f, -0.0671f, -0.1519f, -0.1497f, 0.0444f, 0.0759f, 0.0071f, 0.0234f, 0.0382f, 0.1056f, -0.0084f, -0.2292f, 0.1371f, 0.1042f, 0.0039f, 0.0142f, 0.1007f, -0.0633f, 0.0584f, -0.0164f, -0.0397f, 0.1247f, -0.1010f, -0.0949f, 0.1445f, -0.1040f, -0.0597f, 0.0521f, 0.1429f, 0.0415f, 0.0239f, 0.0249f, -0.0282f, -0.0920f, -0.1194f, -0.0925f, -0.0980f, -0.0119f, 0.0907f, 0.0483f, -0.0419f, -0.2280f, 0.1836f, -0.0810f, 0.0266f, -0.1414f, 0.3431f, 0.0913f, -0.0472f, 0.0420f, -0.0595f, -0.1237f, 0.0642f, 0.0231f, 0.0095f, 0.1126f, 0.0302f, 0.0515f, 0.0283f, 0.1098f, 0.1602f, 0.3475f, -0.0545f, -0.1187f, -0.0062f, 0.0613f, 0.0529f, 0.0357f, 0.0460f, -0.2339f, 0.0579f, 0.2055f, 0.1000f, 0.1162f, -0.0822f, 0.0308f, 0.0152f, 0.0156f, 0.1711f, 0.0081f, 0.1460f, 0.0694f, 0.1823f, -0.1197f, -0.0623f, -0.0431f, 0.0853f, -0.0161f, 0.1497f, -0.1092f, 0.1449f, -0.0777f, 0.0427f, -0.1268f, 0.1272f, 0.0295f, 0.1248f, -0.1457f, -0.0735f, 0.0218f, -0.2008f, -0.1228f, -0.0526f, 0.1086f, 0.0394f, 0.0372f, 0.1164f, -0.0530f, -0.0703f, 0.1041f, 0.1165f, -0.0254f, 0.0386f, -0.2002f, -0.0740f, 0.1891f, 0.1588f, 0.0047f, -0.1062f, -0.1407f, 0.1069f, -0.1346f, -0.0642f, -0.0661f, -0.0115f, -0.0755f, 0.0692f, 0.1249f, 0.0131f, 0.0047f, -0.0722f, -0.0595f, 0.1472f, -0.0735f, -0.0756f, 0.0268f, -0.0982f, 0.2211f, -0.0894f, -0.1077f, -0.1587f, -0.2079f, 0.1580f, 0.1779f, -0.0214f, 0.0564f, 0.0611f, 0.0943f, 0.0165f, -0.0924f, -0.1034f, 0.0631f, -0.0405f, 0.1517f, 0.1113f, -0.0107f, 0.0474f, -0.0541f};
        float[] car = new float[] {0.1375f, 0.1736f, 0.0155f, 0.2376f, -0.2047f, 0.1871f, 0.2915f, 0.0037f, 0.0490f, 0.2602f, -0.0832f, -0.1565f, 0.0869f, -0.0478f, -0.1186f, 0.1549f, -0.1691f, -0.1224f, -0.1407f, 0.0454f, -0.0382f, -0.1468f, 0.1369f, -0.1505f, -0.0182f, 0.0147f, -0.0421f, 0.1394f, 0.0429f, 0.3053f, -0.0167f, 0.2916f, -0.0333f, -0.0469f, 0.0268f, 0.0871f, -0.0539f, 0.1338f, 0.0851f, -0.0641f, -0.1038f, -0.1813f, -0.1109f, 0.1670f, -0.1998f, 0.0045f, -0.0189f, -0.0279f, -0.2932f, -0.0058f, 0.1753f, 0.1087f, -0.0188f, 0.0253f, 0.0996f, -0.0313f, 0.0975f, -0.1575f, -0.1647f, -0.0687f, 0.0001f, 0.0160f, 0.1104f, 0.0610f, 0.1075f, -0.1336f, -0.0703f, 0.1164f, 0.1185f, 0.0615f, -0.0818f, 0.0041f, 0.0123f, 0.0157f, 0.0373f, -0.0109f, -0.0878f, 0.2941f, -0.1093f, -0.0745f, -0.2636f, -0.0284f, -0.1522f, -0.1005f, 0.0463f, -0.0651f, -0.0757f, 0.0146f, -0.0301f, -0.0628f, 0.0732f, -0.3399f, -0.0212f, 0.1204f, 0.0195f, 0.1464f, 0.0420f, 0.2272f, -0.0477f, 0.0583f, -0.1182f, 0.0195f, 0.1293f, -0.0823f, -0.1824f, 0.1228f, -0.0433f, -0.0763f, -0.1493f, 0.1326f, 0.2071f, -0.2402f, -0.0302f, 0.1001f, 0.1095f, 0.1781f, 0.0520f, -0.1187f, -0.0670f, 0.2077f, -0.0314f, 0.2846f, -0.0852f, -0.0201f, -0.0193f, -0.2076f, -0.1205f, 0.1405f, 0.1057f, 0.0039f, 0.0656f, -0.2376f, -0.0357f, -0.0803f, -0.0225f, -0.1231f, 0.1510f, 0.2437f, 0.1886f, 0.0031f, -0.1428f, 0.0787f, 0.0061f, -0.1674f, -0.0855f, 0.0796f, -0.3456f, 0.0583f, -0.1062f, -0.1788f, -0.0463f, -0.0723f, 0.0700f, -0.0118f, -0.1155f, -0.0583f, 0.1167f, 0.0570f, -0.0790f, 0.0836f, 0.0816f, -0.1736f, 0.2345f, 0.0314f, -0.0283f, -0.0313f, 0.1574f, -0.0124f, -0.0604f, 0.1004f, 0.1091f, 0.0535f, -0.1129f, -0.2188f, -0.0227f, -0.2151f, -0.1116f, -0.0390f, 0.0859f, -0.1979f, -0.0418f, -0.1151f, 0.0450f, -0.1305f, -0.0606f, 0.3081f, -0.0484f, -0.0504f, 0.0568f, 0.1035f, 0.0378f, 0.0018f, 0.0236f, 0.1280f, -0.0925f, -0.1442f, 0.3024f, -0.1209f, 0.0256f, -0.0444f, 0.1318f, 0.0505f, 0.0499f, -0.0454f, -0.1253f, 0.1034f, 0.0903f, 0.0089f, 0.0190f, 0.0609f, 0.0895f, -0.0971f, -0.0947f, 0.0292f, -0.0153f, -0.1616f, 0.0032f, -0.0659f, 0.0644f, -0.0262f, 0.0767f, -0.0307f, -0.1665f, -0.0454f, 0.1129f, 0.0202f, -0.0631f, -0.2736f, -0.0825f, -0.0755f, 0.2459f, 0.0784f, -0.0732f, -0.0558f, -0.0208f, 0.0132f, -0.1156f, -0.1288f, -0.0777f, 0.0139f, 0.0769f, 0.0353f, -0.0736f, -0.1481f, 0.1575f, 0.2795f, -0.0701f, -0.1308f, -0.0656f, -0.0390f, 0.0291f, 0.0253f, -0.0187f, 0.0814f, 0.1521f, 0.0524f, -0.2272f, 0.0356f, 0.0105f, -0.0653f, 0.0973f, -0.0646f, -0.0254f, 0.0122f, -0.1398f, -0.0776f, -0.2071f, -0.0715f, 0.0087f, 0.0142f, -0.1930f, 0.2275f, -0.1150f, 0.0409f, -0.0825f, -0.0764f, -0.0939f, 0.0457f, 0.0261f, -0.0334f, 0.0433f, -0.1037f, -0.1414f, -0.1443f, 0.1590f, 0.0099f, 0.0283f, -0.2386f, -0.2764f, -0.0810f, -0.0418f, 0.0175f, -0.1659f, 0.1049f, -0.0111f, 0.0920f, 0.0667f, 0.2077f, 0.0853f, -0.1401f};
        
        Vector q = new Vector(car).normalize().setLabel("car");
        List<Bucket> query = tree.query(q);
        printList(outer((float) tree.getC(), (float) tree.getR(), q, query));
        // printList(query);

    }

    public static List<Vector> closest(Vector q, List<Bucket> query) {
        List<Vector> all = new ArrayList<>();
        for (Bucket b : query) {
            all.addAll(b.getContent());
        }
        all.sort(VectorComparators.byDot(q));
        return all;
    }

    public static List<Vector> farthest(Vector q, List<Bucket> query) {
        List<Vector> all = new ArrayList<>();
        for (Bucket b : query) {
            all.addAll(b.getContent());
        }
        all.sort(VectorComparators.byDot(q));
        return all.reversed();
    }

    public static float getMeanDist(Vector q, List<Bucket> query) {
        List<Vector> all = new ArrayList<>();
        int count = 0;
        float result = 0;
        for (Bucket b : query) {
            for(Vector v : b.getContent()) {
                count++;
                result += q.dot(v);
            }
        }
        return result / count;
    }

    public static List<Vector> inner(float c, float r, Vector q, List<Bucket> query) {
        HashSet<Vector> inner = new HashSet<>();
        for (Bucket b : query) {
            for(Vector v : b.getContent()) {
                if (q.distance(v) <= r) {
                    inner.add(v);
                }
            }
        }
        System.out.println(inner.size());
        return new ArrayList<Vector>(inner);
    }

    public static List<Vector> outer(float c, float r, Vector q, List<Bucket> query) {
        HashSet<Vector> outer = new HashSet<>();
        for (Bucket b : query) {
            for (Vector v : b.getContent()) {
                float dist = q.distance(v);
                System.out.println(v.getLabel() + ", dist: " + dist + ", r: " + r + ", c*r: " + c*r);
                if (dist <= c*r && dist > r) outer.add(v);
            }
        }
        return new ArrayList<Vector>(outer);
    }

    public static void printList(int n, List<Vector> list) {
        if (n > list.size()) n = list.size();
        String str = "[" + list.get(0).getLabel();
        for (int i = 1; i < list.size(); i++) {
            str += ", " + list.get(i).getLabel();
        }
        str += "]";
        System.out.println(str);
    }

    public static void printList(List<Vector> list) {
        String str = "[" + list.get(0).getLabel();
        for (int i = 1; i < list.size(); i++) {
            str += ", " + list.get(i).getLabel();
        }
        str += "]";
        System.out.println(str);
    }
}